package ObjectOriented.Usage.sam01;
/*
다형성
-원래 생물학적 용어로 여러(poly) 형태(morphy)를 의미
-외부에 보이는 모습은 한가지 형태이지만 실질적으로 쓰이는 기능은 여러 가지 역할을 수행한다는 의미
-다형성의 예
    :오버로딩 (overloading)
    :오버라이딩 (overriding)

클래스 앞의 final
-클래스를 더 이상 상속할 수 없음을 의미하는 키워드

메소드 반환형 앞의 지정자 final
-하위 클래스에서 더 이상 메소드 오버라이딩이 허용하지 않음을 의미하는 키워드

오버라이딩 메소드
-가장 하위 객체의 메소드 실행

+이동한다 라는 의미가 대상에 따라 달라짐
final 키워드를 붙이면 더 이상 자식들이 해당 메서드를 오버라이딩 하지 못함
* */
public class 오버라이딩테스트 {
    public static void main(String[] args) {
        사람 남자 = new 사람("홍길동",1111);
        남자.정보출력();
        //System.out.println("이름: "+남자.이름+", 주민번호: "+남자.번호);

        사람 여자 = new 사람("박하은",2222);
        여자.정보출력();
        //System.out.println("이름: "+여자.이름+", 주민번호: "+여자.번호);

        //사람을 상속받은 교직원
        교직원 남자교직원 = new 교직원("이순신",3333,"패스트캠퍼스",33333);
        //남자교직원.정보출력(); 이름: 이순신 주민번호: 3333 사람 정보만 나오지 교직원 정보가 나오지 않는다
        //남자교직원.교직원정보출력();
        남자교직원.정보출력();

        사무직원 남자사무직원 = new 사무직원("강감찬", 4444, "패스트캠퍼스",44444, "경영지원");

        //오버라이딩을 왜 쓰는가?
        사람[] 사람목록 = {남자, 여자, 남자교직원, 남자사무직원}; //사람 배열에 담겨있는 교직원이 자신의 특성에 맞는 메서드를 출력할 수 있음
        for (int i = 0; i < 사람목록.length; i++) {
            사람목록[i].정보출력();
        }
        //사람 목록은 사람 클래스의 배열이지만, 남자교직원과 남자사무직원이 본질은 교직원과 사무직원, 따라서 정보출력을 하면 자기 본질의 메서드가 실행
        //남자사무직원의 본질은 사무직원인데 교직원 정보가 출력됨 > 사무직원 오버라이딩
    }
}
