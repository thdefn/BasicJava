package ObjectOriented;
/*
*
생성자의 구성
-반환형을 기술하지 않으며 이름은 반드시 클래스 이름
-생성자의 인자는 필요하면 기술
-생성자는 주로 접근 지정자 public을 사용
    :만일 필요하다면 생성자의 접근 지정자도 private 또는 protected도 가능 > 보통 singleton 패턴에서 사용, 생성자 생성 불가
-생성자의 반대인 소멸자도 존재 finalize
    :포인터를 가지고 있는 언어들은 소멸자를 처리함 But 자바 vm의 판단으로 소멸시킴 (가비지 컬렉터)

기본 생성자
-인자가 없는 생성자
-클래스 학생에서 생성자가 하나도 구현되지 않았다면 new Student()와 같이 인자가 없는 생성자를 호출하여 객체를 생성
    :생성자를 전혀 구현하지 않은 클래스는 자동으로 기본 생성자를 제공
-클래스에서 인자가 있는 생성자가 적어도 하나 구현되었다면 더 이상 기본 생성자는 자동으로 사용 불가능
    :기본 생성자를 사용하려면 기본 생성자를 직접 구현해야 함
* */
public class 학생 {
    public String 이름;

    //생성자는 함수와 생긴게 비슷함
    public 학생(){
        System.out.println("학생 생성자가 호출되어짐");
    }

    //이름이라는 매개변수를 받는 생성자를 만듦
    public 학생(String 이름){
        System.out.println("이름 파라미터를 갖는 학생 생성자가 호출되어짐");
        this.이름 = 이름;
    }
}
